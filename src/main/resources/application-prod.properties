# Configuración alternativa - parseando DATABASE_URL manualmente
spring.datasource.url=${DATABASE_URL}
spring.datasource.driver-class-name=org.postgresql.Driver

# Si DATABASE_URL no funciona, usar configuración explícita:
# spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:arposhop}
# spring.datasource.username=${DB_USER:arposhop}
# spring.datasource.password=${DB_PASSWORD:password}

spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false

# Configuración robusta para PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Pool de conexiones optimizado para Render
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.leak-detection-threshold=60000

# Server configuration
server.port=${PORT:8080}
server.servlet.context-path=/

# Cloudinary configuration con valores por defecto
cloud.name=${CLOUDINARY_NAME:default}
cloud.key=${CLOUDINARY_KEY:default}
cloud.secret=${CLOUDINARY_SECRET:default}

# Logging mejorado
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
logging.level.com.arpo=INFO
logging.level.org.springframework.jdbc=INFO

# Desactivar inicialización de datos
spring.sql.init.mode=never
spring.jpa.defer-datasource-initialization=false

# Configuración adicional para producción
spring.jpa.open-in-view=false
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized